{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["contractABI","abi","getWavePortalContract","ethereum","signer","ethers","providers","Web3Provider","getSigner","Contract","Loading","className","App","useState","mining","setMining","showColorPicker","setShowColorPicker","x","y","activeCell","setActiveCell","tempColor","setTempColor","cells","setCells","currentAccount","setCurrentAccount","hideColorPicker","escFunction","useCallback","event","keyCode","useEffect","document","addEventListener","removeEventListener","updateCell","a","window","console","log","wavePortalContract","addCell","gasLimit","waveTxn","wait","updateAllCellsFromETH","updateCellColor","color","from","prevCells","newCells","author","getAllCells","rawGrid","forEach","rawItem","row","cell","push","on","timestamp","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","picker","style","position","left","top","display","flexDirection","rowGap","onChangeComplete","hex","onClick","overlay","zIndex","backgroundColor","map","rowItems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0fe2071d.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport abi from './utils/WavePortal.json';\nimport { TwitterPicker } from 'react-color';\n\nconst contractAddress = '0x0AdC3DF39f80783a79Df184B01e0fe9e07B6678D';\nconst contractABI = abi.abi;\n\nconst getWavePortalContract = (ethereum) => {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSigner();\n  const wavePortalContract = new ethers.Contract(\n    contractAddress,\n    contractABI,\n    signer,\n  );\n  return wavePortalContract;\n};\n\nfunction Loading() {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n}\n\nexport default function App() {\n  const [mining, setMining] = useState(false);\n  const [showColorPicker, setShowColorPicker] = useState(false);\n  const [activeCell, setActiveCell] = useState({ x: 0, y: 0 });\n  const [tempColor, setTempColor] = useState('#fff');\n  const [cells, setCells] = useState([]);\n  const [currentAccount, setCurrentAccount] = useState('');\n\n  const hideColorPicker = () => {\n    setShowColorPicker(false);\n  };\n\n  const escFunction = useCallback((event) => {\n    if (event.keyCode === 27) {\n      hideColorPicker();\n    }\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener('keydown', escFunction, false);\n    return () => {\n      document.removeEventListener('keydown', escFunction, false);\n    };\n  });\n\n  const updateCell = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        return console.log(\"Ethereum object doesn't exist!\");\n      }\n      const wavePortalContract = getWavePortalContract(ethereum);\n      setMining(true);\n      const waveTxn = await wavePortalContract.addCell(\n        tempColor,\n        activeCell.x,\n        activeCell.y,\n        {\n          gasLimit: 300000,\n        },\n      );\n      await waveTxn.wait();\n      await updateAllCellsFromETH(wavePortalContract);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setMining(false);\n    }\n  };\n\n  const updateCellColor = (x, y, color, from) => {\n    setCells((prevCells) => {\n      const newCells = [...prevCells];\n      newCells[x][y].color = color;\n      newCells[x][y].author = from;\n      return newCells;\n    });\n  };\n\n  const updateAllCellsFromETH = async (wavePortalContract) => {\n    const rawGrid = await wavePortalContract.getAllCells();\n    const cells = [];\n    rawGrid.forEach((rawItem) => {\n      const row = [];\n      rawItem.forEach((cell) => {\n        row.push({\n          color: cell.color,\n          author: cell.author,\n        });\n      });\n      cells.push(row);\n    });\n    setCells(cells);\n  };\n\n  const getAllCells = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        return console.log(\"Ethereum object doesn't exist!\");\n      }\n      const wavePortalContract = getWavePortalContract(ethereum);\n      await updateAllCellsFromETH(wavePortalContract);\n\n      wavePortalContract.on('NewCell', (from, timestamp, color, x, y) => {\n        updateCellColor(x, y, color, from);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have metamask!');\n        return;\n      }\n      console.log('We have the ethereum object', ethereum);\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Found an authorized account:', account);\n        setCurrentAccount(account);\n      } else {\n        console.log('No authorized account found');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getAllCells();\n  }, []);\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  const picker = showColorPicker && (\n    <div\n      style={{\n        position: 'absolute',\n        left: activeCell.y * 42,\n        top: activeCell.x * 42 + 53,\n        display: 'flex',\n        flexDirection: 'column',\n        rowGap: 10,\n      }}\n    >\n      <TwitterPicker\n        color={tempColor}\n        onChangeComplete={(color) => {\n          setTempColor(color.hex);\n        }}\n      />\n      <div className=\"button-container\">\n        <button onClick={updateCell}>Update Cell</button>\n        <button onClick={hideColorPicker}>Cancel</button>\n      </div>\n    </div>\n  );\n\n  const overlay = (\n    <div\n      className=\"closePicker\"\n      onClick={hideColorPicker}\n      style={{\n        zIndex: mining ? 1 : 0,\n        backgroundColor: mining ? 'rgb(255 123 11 / 50%)' : 'transparent',\n      }}\n    >\n      {mining && <Loading />}\n    </div>\n  );\n\n  return (\n    <div className=\"mainContainer\">\n      {overlay}\n      <div className=\"header\">\n        🪀 Hey there! Choose a grid cell and update its color on a blockchain!\n      </div>\n      <div className=\"dataContainer\">\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n        {picker}\n        <div className=\"grid-container\">\n          {cells.map((rowItems, x) => {\n            return (\n              <div key={x} className=\"row\">\n                {rowItems.map((cell, y) => {\n                  const color =\n                    showColorPicker && x === activeCell.x && activeCell.y === y\n                      ? tempColor\n                      : cell.color || '#fff';\n\n                  const onCellSelected = () => {\n                    setActiveCell({ x, y });\n                    setTempColor(color);\n                    setShowColorPicker(true);\n                  };\n                  return (\n                    <div\n                      className=\"cell\"\n                      style={{ backgroundColor: color }}\n                      key={y}\n                      onClick={onCellSelected}\n                    >\n                      {cell.color && (\n                        <span className=\"tooltiptext\">{cell.author}</span>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}