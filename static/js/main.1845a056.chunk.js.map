{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","contractABI","abi","wave","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","console","log","toNumber","waveTxn","hash","wait","useState","currentAccount","setCurrentAccount","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","useEffect","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8nOAOe,SAASA,IACtB,IAAMC,EAAcC,EAAIA,IAElBC,EAAI,uCAAG,wCAAAC,EAAA,oEAEYC,SAAbC,EAFC,EAEDA,UAFC,wBAKDC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SAZtB,6CAcdb,EACAU,GAVK,SAaWE,EAAmBE,gBAb9B,cAaHC,EAbG,OAcPC,QAAQC,IAAI,gCAAiCF,EAAMG,YAd5C,UAgBeN,EAAmBV,OAhBlC,eAgBDiB,EAhBC,OAiBPH,QAAQC,IAAI,YAAaE,EAAQC,MAjB1B,UAmBDD,EAAQE,OAnBP,eAoBPL,QAAQC,IAAI,YAAaE,EAAQC,MApB1B,UAsBOR,EAAmBE,gBAtB1B,QAsBPC,EAtBO,OAuBPC,QAAQC,IAAI,gCAAiCF,EAAMG,YAvB5C,wBAyBPF,QAAQC,IAAI,kCAzBL,0DA4BTD,QAAQC,IAAR,MA5BS,0DAAH,qDAgCV,EAA4CK,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEMC,EAAwB,uCAAG,kCAAAtB,EAAA,oEAERC,OAAbC,EAFqB,EAErBA,SAFqB,uBAK3BW,QAAQC,IAAI,gCALe,0BAQ3BD,QAAQC,IAAI,8BAA+BZ,GARhB,wBAcNA,EAASqB,QAAQ,CAAEC,OAAQ,iBAdrB,QAgBL,KAFlBC,EAduB,QAgBhBC,QACLC,EAAUF,EAAS,GACzBZ,QAAQC,IAAI,+BAAgCa,GAC5CN,EAAkBM,IAElBd,QAAQC,IAAI,+BArBe,kDAwB7BD,QAAQC,IAAR,MAxB6B,0DAAH,qDA+BxBc,EAAa,uCAAG,gCAAA5B,EAAA,oEAEGC,OAAbC,EAFU,EAEVA,SAFU,uBAKhB2B,MAAM,iBALU,0CASK3B,EAASqB,QAAQ,CACtCC,OAAQ,wBAVQ,OASZC,EATY,OAalBZ,QAAQC,IAAI,YAAaW,EAAS,IAClCJ,EAAkBI,EAAS,IAdT,kDAgBlBZ,QAAQC,IAAR,MAhBkB,0DAAH,qDAwBnB,OAJAgB,qBAAU,WACRR,MACC,IAGD,qBAAKS,UAAU,gBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,SAAf,qCAEA,qBAAKA,UAAU,MAAf,qIAKA,wBAAQA,UAAU,aAAaC,QAASjC,EAAxC,yBAIEqB,GACA,wBAAQW,UAAU,aAAaC,QAASJ,EAAxC,iCClHV,IAYeK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1845a056.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport abi from './utils/WavePortal.json';\n\nconst contractAddress = '0x238A7111909b6A6AE571BFeBA6C6ca1C49a8693b';\n\nexport default function App() {\n  const contractABI = abi.abi;\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log('Retrieved total wave count...', count.toNumber());\n\n        const waveTxn = await wavePortalContract.wave();\n        console.log('Mining...', waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log('Mined -- ', waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log('Retrieved total wave count...', count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const [currentAccount, setCurrentAccount] = useState('');\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have metamask!');\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n      }\n\n      /*\n       * Check if we're authorized to access the user's wallet\n       */\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Found an authorized account:', account);\n        setCurrentAccount(account);\n      } else {\n        console.log('No authorized account found');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /**\n   * Implement your connectWallet method here\n   */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">ðŸ‘‹ Hey there!</div>\n\n        <div className=\"bio\">\n          I am Sereja and I worked on self-driving cars so that's pretty cool\n          right? Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}