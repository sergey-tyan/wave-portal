{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["contractAddress","contractABI","abi","App","useState","counter","setCounter","mining","setMining","wave","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","console","log","toNumber","waveTxn","hash","wait","currentAccount","setCurrentAccount","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","useEffect","className","src","alt","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6nOAKMA,EAAkB,6CAClBC,EAAcC,EAAIA,IAET,SAASC,IACtB,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAI,uCAAG,wCAAAC,EAAA,oEAEYC,SAAbC,EAFC,EAEDA,UAFC,wBAKDC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SACpCpB,EACAC,EACAgB,GAVK,SAaWE,EAAmBE,gBAb9B,cAaHC,EAbG,OAcPC,QAAQC,IAAI,gCAAiCF,EAAMG,YACnDjB,GAAU,GAfH,UAgBeW,EAAmBV,OAhBlC,eAgBDiB,EAhBC,OAiBPH,QAAQC,IAAI,YAAaE,EAAQC,MAjB1B,UAmBDD,EAAQE,OAnBP,eAoBPL,QAAQC,IAAI,YAAaE,EAAQC,MApB1B,UAsBOR,EAAmBE,gBAtB1B,QAsBPC,EAtBO,OAuBPhB,EAAWgB,EAAMG,YACjBjB,GAAU,GACVe,QAAQC,IAAI,gCAAiCF,EAAMG,YAzB5C,wBA2BPF,QAAQC,IAAI,kCA3BL,0DA8BTD,QAAQC,IAAR,MA9BS,0DAAH,qDAkCV,EAA4CpB,mBAAS,IAArD,mBAAOyB,EAAP,KAAuBC,EAAvB,KAEMC,EAAwB,uCAAG,0CAAArB,EAAA,oEAERC,OAAbC,EAFqB,EAErBA,SAFqB,uBAK3BW,QAAQC,IAAI,gCALe,iCAQrBX,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SACpCpB,EACAC,EACAgB,GAbyB,UAgBTE,EAAmBE,gBAhBV,QAgBvBC,EAhBuB,OAiB3BhB,EAAWgB,EAAMG,YACjBF,QAAQC,IAAI,8BAA+BZ,GAlBhB,yBAwBNA,EAASoB,QAAQ,CAAEC,OAAQ,iBAxBrB,QA0BL,KAFlBC,EAxBuB,QA0BhBC,QACLC,EAAUF,EAAS,GACzBX,QAAQC,IAAI,+BAAgCY,GAC5CN,EAAkBM,IAElBb,QAAQC,IAAI,+BA/Be,kDAkC7BD,QAAQC,IAAR,MAlC6B,0DAAH,qDAyCxBa,EAAa,uCAAG,gCAAA3B,EAAA,oEAEGC,OAAbC,EAFU,EAEVA,SAFU,uBAKhB0B,MAAM,iBALU,0CASK1B,EAASoB,QAAQ,CACtCC,OAAQ,wBAVQ,OASZC,EATY,OAalBX,QAAQC,IAAI,YAAaU,EAAS,IAClCJ,EAAkBI,EAAS,IAdT,kDAgBlBX,QAAQC,IAAR,MAhBkB,0DAAH,qDAwBnB,OAJAe,qBAAU,WACRR,MACC,IAGD,qBAAKS,UAAU,gBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,SAAf,qCAEA,mDAAsBnC,KACrBE,GACC,qBAAKkC,IAAI,kCAAkCC,IAAI,uBAEjD,wBAAQF,UAAU,aAAaG,QAASlC,EAAxC,qCAIEoB,GACA,wBAAQW,UAAU,aAAaG,QAASN,EAAxC,iCC9HV,IAYeO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7492e3f5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport abi from './utils/WavePortal.json';\n\nconst contractAddress = '0x238A7111909b6A6AE571BFeBA6C6ca1C49a8693b';\nconst contractABI = abi.abi;\n\nexport default function App() {\n  const [counter, setCounter] = useState(0);\n  const [mining, setMining] = useState(false);\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer,\n        );\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log('Retrieved total wave count...', count.toNumber());\n        setMining(true);\n        const waveTxn = await wavePortalContract.wave();\n        console.log('Mining...', waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log('Mined -- ', waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        setCounter(count.toNumber());\n        setMining(false);\n        console.log('Retrieved total wave count...', count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const [currentAccount, setCurrentAccount] = useState('');\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have metamask!');\n        return;\n      } else {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer,\n        );\n\n        let count = await wavePortalContract.getTotalWaves();\n        setCounter(count.toNumber());\n        console.log('We have the ethereum object', ethereum);\n      }\n\n      /*\n       * Check if we're authorized to access the user's wallet\n       */\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Found an authorized account:', account);\n        setCurrentAccount(account);\n      } else {\n        console.log('No authorized account found');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /**\n   * Implement your connectWallet method here\n   */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">ðŸª€ Hey there!</div>\n\n        <h1>Current count is {counter}</h1>\n        {mining && (\n          <img src=\"https://i.imgur.com/FDI8tdh.gif\" alt=\"Dudes mining stuff\" />\n        )}\n        <button className=\"waveButton\" onClick={wave}>\n          Increment the counter!\n        </button>\n\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}